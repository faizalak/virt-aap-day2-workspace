---
- name: Patch Fedora VM via openshift_virtualization
  hosts: vmexamples-user1-fedora02
  gather_facts: false
  collections:
    - redhat.openshift_virtualization

  tasks:
    - name: Debug dynamic variables
      debug:
        msg: "Namespace: {{ namespace }}, VM Name: {{ vm_name }}"

    - name: Debug and verify Kube environment variables
      debug:
        msg: |
          K8S_AUTH_API_KEY is: "{{ lookup('env', 'K8S_AUTH_API_KEY') }}"
          K8S_AUTH_HOST is: "{{ lookup('env', 'K8S_AUTH_HOST') }}"
        
    - name: Get Fedora VM object
      redhat.openshift_virtualization.kubevirt_vm_info:
        host: "{{ lookup('env', 'K8S_AUTH_HOST') }}"
        api_key: "{{ lookup('env', 'K8S_AUTH_API_KEY') }}"
        # Set validate_certs to false if you are using a self-signed certificate.
        # It's better to configure a proper CA in your execution environment.
        validate_certs: false 
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
      register: vm_info

    - name: Debug VM object
      debug:
        var: vm_info.resources[0]

    - name: Debug VM status
      debug:
        var: vm_info.resources[0].status.printableStatus

    - name: Ensure the VM is in a running state
      redhat.openshift_virtualization.kubevirt_vm:
        host: "{{ lookup('env', 'K8S_AUTH_HOST') }}"
        api_key: "{{ lookup('env', 'K8S_AUTH_API_KEY') }}"
        namespace: "{{ namespace }}"
        name: "{{ vm_name }}"
        state: "running"
      # This task will only run if the VM is not already in a running state.
      when: vm_info.resources[0].status.printableStatus != "Running"

    #- name: Wait for the VM to start and get its IP address
    #  redhat.openshift_virtualization.kubevirt_vm_info:
    #    host: "{{ lookup('env', 'K8S_AUTH_HOST') }}"
    #    api_key: "{{ lookup('env', 'K8S_AUTH_API_KEY') }}"
    #    namespace: "{{ namespace }}"
    #    name: "{{ vm_name }}"
    #  register: vm_info
    #  until: "vm_info.resources[0].status.interfaces[0].ipAddress is defined"
    #  retries: 30
    #  delay: 10

    - name: Add the VM to the inventory for patching
      add_host:
        #name: "{{ vm_info.resources[0].status.interfaces[0].ipAddress }}"
        name: "10.10.10.20:30253"
        groups: 
          - patched_vms
        ansible_user: "fedora" # Or the correct SSH user for your VM

- name: Patch VM via SSH
  hosts: patched_vms
  gather_facts: yes
  become: yes

  tasks:
    - name: Patch the Fedora VM with DNF
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_only: yes
      register: dnf_result

    - name: Reboot the VM if packages were updated
      when: dnf_result.changed
      block:
        - name: Restart the VM gracefully
          ansible.builtin.reboot:
            reboot_timeout: 600
